{"EDITOR_STATE":{"allProjectFiles":{"448d02f1-9950-4d2a-a490-4f639bcf302b":{"id":"448d02f1-9950-4d2a-a490-4f639bcf302b","parent":null,"name":"TestSQS","type":"DIRECTORY","isDirectory":true,"children":["980a6e5c-a0d1-484c-9b62-6a9bbad6685a"],"isRemovable":false,"filePath":"TestSQS"},"980a6e5c-a0d1-484c-9b62-6a9bbad6685a":{"id":"980a6e5c-a0d1-484c-9b62-6a9bbad6685a","parent":"448d02f1-9950-4d2a-a490-4f639bcf302b","name":"lambda.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"TestSQS/lambda.js","code":"let AWS = require('aws-sdk');\nconst kinesis = new AWS.Kinesis();\nlet sqs = new AWS.SQS();\nlet date = require('date-and-time');\nconst ddb = new AWS.DynamoDB.DocumentClient();\nconst sns = new AWS.SNS();\n\nexports.handler = (event, context, callback) => {\n\n\tsqs.receiveMessage({\n\t\tQueueUrl: 'https://sqs.us-east-1.amazonaws.com/318300609668/KTestSQS',\n\t\tAttributeNames: ['All'],\n\t\tMaxNumberOfMessages: '10',\n\t\tVisibilityTimeout: '30',\n\t\tWaitTimeSeconds: '20'\n\t}).promise()\n\t\t.then(data => {\n\t\t\tdata.Messages.forEach(message => {      // Going through all the fetched messages in this attempt\n\t\t\t\tconsole.log(\"Received message with payload\", message.Body);\n\n\t\t\t\tlet messageBody = JSON.parse(message.Body);\n\n\t\t\t\tlet bookingDateObj = new Date();\n\t\t\t\tlet startingDateObj = date.parse(messageBody.bookingRequest.startDate, 'YYYY-MM-DD');\n\t\t\t\tlet endingDateObj = date.parse(messageBody.bookingRequest.endDate, 'YYYY-MM-DD');\n\n\t\t\t\tlet failure = messageBody.bookingReqProcessingState === \"Failed\";       // Check whether it's a booking failure\n\t\t\t\tif (failure) {\n\t\t\t\t\tlet notificationMsg = \"Notifying about booking failure for booking reference :\" + messageBody.bookingRef;\n\n\t\t\t\t\tsns.publish({\n\t\t\t\t\t\tMessage: notificationMsg,\n\t\t\t\t\t\tMessageAttributes: {\n\t\t\t\t\t\t\t'AWS.SNS.SMS.SMSType': {\n\t\t\t\t\t\t\t\tDataType: 'String',\n\t\t\t\t\t\t\t\tStringValue: 'Promotional'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'AWS.SNS.SMS.SenderID': {\n\t\t\t\t\t\t\t\tDataType: 'String',\n\t\t\t\t\t\t\t\tStringValue: 'BkFailures'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tPhoneNumber: '+940772445224'\n\t\t\t\t\t}).promise()\n\t\t\t\t\t\t.then(data => {\n\t\t\t\t\t\t\tconsole.log(\"Successfully sent notification to the operator with response :\" + JSON.stringify(data));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\tconsole.log(\"Error while sending notification SMS\", err);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tlet gapForBookingStartDate = date.subtract(startingDateObj, bookingDateObj).toDays();\n\t\t\t\tlet gapBetweenBookingDates = date.subtract(endingDateObj, startingDateObj).toDays();\n\n\t\t\t\t// Check whether is it a booking anomaly. In this example it's detected as an anomaly if booking start date is\n\t\t\t\t// 6 months (180 days) away from the current date or booking date range is greater than 20 days\n\t\t\t\tif (gapBetweenBookingDates > 20 || gapForBookingStartDate > 180) {\n\t\t\t\t\tddb.put({\n\t\t\t\t\t\tTableName: 'BookingInfoAnomalies',\n\t\t\t\t\t\tItem: {\n\t\t\t\t\t\t\t'ResellerID': messageBody.resellerId,\n\t\t\t\t\t\t\t'BookingRef': messageBody.bookingRef,\n\t\t\t\t\t\t\t'BookingState': !failure,\n\t\t\t\t\t\t\t'StartDate': messageBody.bookingRequest.startDate,\n\t\t\t\t\t\t\t'EndDate': messageBody.bookingRequest.endDate,\n\t\t\t\t\t\t\t'Pax': messageBody.bookingRequest.pax,\n\t\t\t\t\t\t\t'City': messageBody.bookingRequest.city,\n\t\t\t\t\t\t\t'Grade': messageBody.bookingRequest.grade,\n\t\t\t\t\t\t\t'InsertTime': insertTimeStr\n\t\t\t\t\t\t}\n\t\t\t\t\t}, function (err, data) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t//handle error\n\t\t\t\t\t\t\tconsole.log(\"Error while inserting data to DynamoDB due to : \", err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//your logic goes here\n\t\t\t\t\t\t\tconsole.log(\"Successfully inserted booking ref : \" + messageBody.bookingRef +\n\t\t\t\t\t\t\t\t\" to DynamoDB with response : \" + JSON.stringify(data));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tlet insertTimeStr = date.format(new Date(), 'YYYY-MM-DD HH:mm:ss');\n\t\t\t\t}\n\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(\"Error while fetching messages from the sqs queue\", err);\n\t\t});\n\n\tcallback(null, 'Lambda execution completed');\n};","triggers":[{"resourceName":"apigusEast1KTesttestSQSpost","config":{}}],"config":{"memory":128,"timeout":60,"runtime":"nodejs8.10"},"version":91,"syncVersion":91}},"rootNode":"448d02f1-9950-4d2a-a490-4f639bcf302b","openFiles":["980a6e5c-a0d1-484c-9b62-6a9bbad6685a"],"currentFileId":"980a6e5c-a0d1-484c-9b62-6a9bbad6685a","resources":{"apigusEast1KTesttestSQSpost":{"name":"apigusEast1KTesttestSQSpost","type":"API_GATEWAY","config":{"selectedRegion":"us-east-1","apiMode":1,"apiName":"KTest","apiId":"ck3qwu9st3","endpointType":"EDGE","rootResourceId":"g4yihj87d3","existingResources":{"/":"g4yihj87d3","/Cal":"hcb72n","/test":"hf5hfs"},"resourceMode":0,"resourceName":"testSQS","resourcePath":"/testSQS","restMethod":"POST","proxyIntegration":false,"enableCORS":false,"stageMode":0,"stageName":"test1"},"globallyEditable":true},"sqsusEast1KTestSQS":{"name":"sqsusEast1KTestSQS","type":"SQS","config":{"mode":1,"existing":true,"name":"KTestSQS","url":"https://sqs.us-east-1.amazonaws.com/318300609668/KTestSQS","selectedRegion":"us-east-1","deliveryDelay":"0","deliveryDelayUnit":"seconds","queueType":"standardQueue","defaultVisibilityTimeout":"30","defaultVisibilityTimeoutUnit":"seconds","messageRetentionPeriodUnit":"seconds","maximumMessageSize":256,"receiveMessageWaitTime":"0","queueARN":"arn:aws:sqs:us-east-1:318300609668:KTestSQS","operation":0},"globallyEditable":true},"snsDirectSMSResource":{"name":"snsDirectSMSResource","type":"SNS","config":{"snsType":1,"numbers":["+940772445224"]},"globallyEditable":false},"ddbBookingInfoAnomalies":{"name":"ddbBookingInfoAnomalies","type":"DynamoDB","config":{"mode":1,"operation":"put","table":{"arn":"arn:aws:dynamodb:us-east-1:318300609668:table/BookingInfoAnomalies","name":"BookingInfoAnomalies","partitionKey":"ResellerID","partitionKeyType":"S","hasSortKey":true,"sortKey":"BookingRef","sortKeyType":"S","mode":1},"parameters":{"Key":{},"Item":{},"ExpressionAttributeValues":{}},"validator":{"validatableFields":{},"validity":true},"valid":true},"globallyEditable":false},"kinesisKinesisPut":{"name":"kinesisKinesisPut","type":"Kinesis","config":{"mode":1,"StreamName":"Kinesis-put","shards":1,"region":"us-east-1","operation":"describe-stream"},"globallyEditable":true}},"envVariables":[{"lambdaId":"all","varKey":"SIGMA_AWS_ACC_ID","varValue":"","editable":false,"isEditable":false}],"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"slappforge-sdk-aws":{"name":"slappforge-sdk-aws","version":"0.0.4","notRemovable":false}}},"lambdaId":"980a6e5c-a0d1-484c-9b62-6a9bbad6685a","additionalFiles":[]},"PROJECT_META":{"projectName":"TestSQS","projectDescription":"","projectVersion":"1.0.0","projectRegion":"us-east-1","repoName":"TestSQS","repoUrl":"https://github.com/Kumudikatest/TestSQS","lastSave":1524560319926}}